name: Pre-commit
description: GitHub Action for running pre-commit hooks against the repository. Conditionally installs tools needed for the Action to be able to perform its duties such as `npm`, `pre-commit`, etc.
inputs:
  config-file:
    required: true
    description: The config file to present to commitlint-github-action
    default: .commitlintrc.yaml
  turo-conventional-commit:
    required: true
    description: Set this to "false" to customize conventional commit configuration
    default: "true"
  only-changed:
    required: false
    description: >-
      Set this to "true" to only run pre-commit against changed files, and not
      the entire repository

runs:
  using: composite
  steps:
    - name: Check for pre-commit-config.yaml
      id: pre-commit-config
      shell: bash
      run: |
        # Check for pre-commit-config.yaml
        if [[ ! -f .pre-commit-config.yaml ]]; then
          echo "::warning::No .pre-commit-config.yaml found, skipping pre-commit"
          echo "exists=false" >> $GITHUB_OUTPUT
          exit 0
        fi
    - name: Version files
      shell: bash
      run: |
        # Find Node and Python versions

        # Try to use local repo .node-version
        NODE_VERSION="${NODE_VERSION:-$(cat ".node-version" || true)}"
        # Try to use existing version
        NODE_VERSION="${NODE_VERSION:-$(node --version || true)}"
        # Try to use action default version
        NODE_VERSION="${NODE_VERSION:-$(cat "$GITHUB_ACTION_PATH/.node-version")}"
        # Write back the file if it doesn't exist
        [[ -f .node-version ]] || { echo "${NODE_VERSION#v}" > .node-version; echo "CLEAN_NODE_VERSION=true" >> "$GITHUB_ENV"; }
        echo "NODE_VERSION=${NODE_VERSION}" >> "$GITHUB_ENV"

        # Try to use local repo .python-version
        PYTHON_VERSION="${PYTHON_VERSION:-$(cat ".python-version" || true)}"
        # Try to use existing version
        PYTHON_VERSION="${PYTHON_VERSION:-$(python --version || true)}"
        # Try to use action default version
        PYTHON_VERSION="${PYTHON_VERSION:-$(cat "$GITHUB_ACTION_PATH/.python-version")}"
        # Strip leading "Python " if it exists
        PYTHON_VERSION="${PYTHON_VERSION//Python /}"
        # Write back the file if it doesn't exist
        [[ -f .python-version ]] || { echo "${PYTHON_VERSION#v}" > .python-version; echo "CLEAN_PYTHON_VERSION=true" >> "$GITHUB_ENV"; }
        echo "PYTHON_VERSION=${PYTHON_VERSION}" >> "$GITHUB_ENV"

        # Finding pre-commit
        # This will set an environment variable we can use to conditionally
        # install pre-commit if needed and toggle how the action runs.
        PRE_COMMIT_BIN=$(command -v pre-commit || true)
        echo "PRE_COMMIT_BIN=$PRE_COMMIT_BIN" >> $GITHUB_ENV

        # Finding python
        # This will set an environment variable we can use to conditionally
        # install python.
        PYTHON_BIN=$(command -v python || true)
        echo "PYTHON_BIN=$PYTHON_BIN" >> $GITHUB_ENV
    - name: Setup python
      # Only run this if we don't already have a pre-commit on the PATH
      if: env.PYTHON_BIN == null && env.PRE_COMMIT_BIN == null && steps.pre-commit-config.outputs.exists != 'false'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install tools
      # This will skip the (slow) pyenv install if we triggered the above
      uses: open-turo/action-setup-tools@v1
    - name: Commitlint
      # This version needs to be sync'd with the repo HEAD if a major version is cut
      uses: open-turo/action-pre-commit/commitlint@v2
      with:
        restore-config: "false"
        config-file: ${{ inputs.config-file }}
        turo-conventional-commit: ${{ inputs.turo-conventional-commit }}
    - name: Get changed files
      uses: tj-actions/changed-files@v42
      if: inputs.only-changed == 'true'
      id: changed-files
    - name: Select files to run pre-commit against
      shell: bash
      run: |
        echo "PRE_COMMIT_ARGS=--all-files" >> "$GITHUB_ENV"
        [[ "${{ steps.changed-files.outputs.all_changed_files_count }}" != "0" ]] || exit 0
        if [[ "${{ inputs.only-changed }}" == "true" ]]; then
          PRE_COMMIT_ARGS="--files ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "PRE_COMMIT_ARGS=$PRE_COMMIT_ARGS" >> "$GITHUB_ENV"
        fi
    - name: Pre-commit (action)
      # Same as above, this will install and run pre-commit for us
      if: env.PRE_COMMIT_BIN == null && steps.pre-commit-config.outputs.exists != 'false'
      uses: pre-commit/action@v3.0.0
      with:
        extra_args: ${{ env.PRE_COMMIT_ARGS }}
    - name: Pre-commit (from PATH)
      # Run pre-commit directly if we found it on the PATH
      if: env.PRE_COMMIT_BIN != null && steps.pre-commit-config.outputs.exists != 'false'
      shell: bash
      run: pre-commit run --show-diff-on-failure --color=always ${{ env.PRE_COMMIT_ARGS }}
    - name: Clean up version files
      if: always()
      shell: bash
      run: |
        # Clean up version files if we wrote them
        [[ "${{ env.CLEAN_PYTHON_VERSION }}" == "" ]] || rm .python-version
        [[ "${{ env.CLEAN_NODE_VERSION }}" == "" ]] || rm .node-version
    - name: Restore commitlint config
      if: always() && hashFiles(inputs.config-file) != '' && inputs.turo-conventional-commit == 'true'
      shell: bash
      run: |
        # Restore the commitlint config file if we wrote it
        git checkout -- "${{ inputs.config-file }}" &>/dev/null || true
